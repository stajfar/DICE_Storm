package org.xtext.dice.toscacloudifydsl;



import java.io.IOException;

//import mymodelingproject.MymodelingprojectPackage;

//import _12._12Package;
import tosca_yaml_standard.*;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;

import com.google.inject.Injector;

public class Xmi2jsonGrammarRunner {
	
public static void main(String[] args) throws IOException {
		// you have to specify the input filename and output filename in program parameters (without file extensions), i.e. HMR_DDSM_TOSCA  MHRDDSM2TOSCA
	   // first Argument is the xmi file that is generated by ATL transformation from XX-DDSM to TOSCA-DDSM.xmi
	   // Second Argument is the name of the output file that generates the YAML as output
		runme("storm_simple","stormJson");
	}
	
	public static void runme(String InputModelPath, String OutputModelPath  ){
	 // Register Epackage of modeling project otherwise, you will see: make sure that Epackage is registered
		 //EPackage.Registry.INSTANCE.put("http://www.w3.org/XML/1998/namespace",NamespacePackage.eINSTANCE);
		 EPackage.Registry.INSTANCE.put("http://tosca_yaml_standard/1.0",Tosca_yaml_standardPackage.eINSTANCE);
		
		 
		 
		 
		 Injector injector = new JsonDslStandaloneSetup().createInjectorAndDoEMFRegistration();
		// my dsl standalone is made by running Xtext artifact
		ResourceSet xmiResourceSet=injector.getInstance(ResourceSet.class);
		
		Resource xmi_resource=(Resource)xmiResourceSet.getResource(URI.createURI(InputModelPath+".xmi"),true);
		
	 
		// destination model that will be made by grammar
		ResourceSet xtext_resourceSet=injector.getInstance(ResourceSet.class);		 
		Resource textualModel_resource =(Resource)xtext_resourceSet.createResource(URI.createURI(OutputModelPath+".json"));
		// add the contents of the source model into destination model 
		textualModel_resource.getContents().add(xmi_resource.getContents().get(0));
		
		
		//save the destination file
		try {
				textualModel_resource.save(null);
		} catch (IOException e) {
			// TODO Auto-generated catch block			
			e.printStackTrace();
		}
		
		
		
		// this part calls the python file	Json2YAMLConverter.py to convert json to its yaml representation	
		try {
			//Note: to be able to execute the following python script you have to install "YAML plug in" on your ubuntu 
			Process p = Runtime.getRuntime().exec("python ./src/org/xtext/dice/toscacloudifydsl/Json2YAMLConverter.py ./"+OutputModelPath+".json"+  " ./"+OutputModelPath+".yaml");
		   
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
				
	}

}
